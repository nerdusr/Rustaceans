// Enum definition with embedded data.
// Demonstrates how data can be associated directly with enum variants.
enum IpAddr {
    V4(u8, u8, u8, u8), // IPv4 address represented as four u8 values.
    V6(String),         // IPv6 address stored as a String.
}

// Enum with complex data types as variants.
// Shows how enums can be combined with structs for modular design.
enum IpAddr {
    V4(Ipv4Addr),       // IPv4 address stored in an Ipv4Addr struct.
    V6(Ipv6Addr),       // IPv6 address stored in an Ipv6Addr struct.
}

// Example of an enum with multiple variants and associated data.
// Demonstrates named fields, single values, and multiple values in variants.
enum Message {
    Quit,                       // No associated data.
    Move { x: i32, y: i32 },    // Named fields like a struct.
    Write(String),              // A single String value.
    ChangeColor(i32, i32, i32), // Three i32 values for RGB color.
}

// Implementing methods on an enum.
// This is similar to defining methods for structs, adding functionality to enums.
impl Message {
    fn call(&self) {
        // Method logic for Message enum goes here.
    }
}

// Rust does not support null references.
// Instead, it uses the Option<T> enum to represent the possibility of "None" or "Some" values.
let some_number = Some(5); // An Option<i32> containing the value 5.
let absent_number: Option<i32> = None; // An Option<i32> explicitly set to None.

// Example of defining patterns using `match`.
// This allows exhaustive handling of all variants for an enum.
fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => {
            println!("Lucky penny!"); // Output for Penny variant.
            1
        }
        Coin::Nickel => 5, // Nickel variant returns 5.
        Coin::Dime => 10,  // Dime variant returns 10.
        Coin::Quarter(state) => {
            // Quarter variant includes a nested UsState value.
            println!("State quarter from {state:#?}!");
            25
        }
    }
}

// Demonstrating the use of if let for concise control flow.
// Handles cases where the value matches a pattern while ignoring others.
if let Some(max) = config_max {
    println!("The maximum is configured to be {max}");
} else {
    println!("No configuration found.");
}

// Demonstrates pattern matching using the let-else syntax.
// This provides a clean way to handle early returns when a pattern does not match.
fn describe_state_quarter(coin: Coin) -> Option<String> {
    let Coin::Quarter(state) = coin else {
        return None; // Returns early if the pattern does not match.
    };

    if state.existed_in(1900) {
        Some(format!("{state:?} is pretty old, for America!"))
    } else {
        Some(format!("{state:?} is relatively new."))
    }
}

// Example of match expressions returning values.
// Demonstrates exhaustive handling of Option<T> enum with patterns.
fn plus_one(x: Option<i32>) -> Option<i32> {
    match x {
        Some(5) => Some(5 + 10), // Specific case for the value 5.
        None => None,            // Handles the None variant.
        Some(i) => Some(i + 1),  // Generic case for other values.
    }
}
